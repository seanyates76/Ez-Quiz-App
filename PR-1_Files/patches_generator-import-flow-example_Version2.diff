--- a/src/generator.js
+++ b/src/generator.js
@@ -1,6 +1,12 @@
+import { ImportController } from './utils/ImportController.js';
+import { sniffFileKind, isSupportedImportKind } from './utils/fileTypeValidation.js';
+
 const importBtn = document.getElementById('importBtn');
 const fileInput = document.getElementById('importFile');
 
+const importCtl = new ImportController();
+
 function setHint(msg) { /* existing implementation */ }
 function clearHint() { /* existing implementation */ }
 function setEditorText(text) { /* existing implementation */ }
@@ -12,33 +18,95 @@
   fileInput?.click();
 });
 
-fileInput?.addEventListener('change', async () => {
-  const f = fileInput?.files && fileInput.files[0];
-  if (!f) return;
-  // existing import logic...
-});
+fileInput?.addEventListener('change', async () => {
+  const f = fileInput?.files && fileInput.files[0];
+  if (!f) return;
+  await handleImportFile(f);
+});
 
+async function handleImportFile(file) {
+  const { token, signal } = importCtl.start();
+  try {
+    importBtn?.setAttribute('disabled', 'true');
+    clearHint();
+    setHint('Importingâ€¦');
+
+    // Validate using magic bytes
+    const kind = await sniffFileKind(file);
+    if (!isSupportedImportKind(kind)) {
+      setHint('Unsupported file. Choose a PDF or image.');
+      return;
+    }
+    if (!importCtl.isCurrent(token)) return;
+
+    // Convert to base64 (update helper to optionally accept AbortSignal)
+    const { base64 } = await toBase64(file /*, { signal }*/);
+    if (!importCtl.isCurrent(token)) return;
+
+    // Send to backend
+    const resp = await postIngest({ fileName: file.name, data: base64 } /*, { signal }*/);
+    if (!importCtl.isCurrent(token)) return;
+
+    if (resp?.ok && resp?.data?.text) {
+      const text = String(resp.data.text || '');
+      if (importCtl.isCurrent(token)) {
+        setEditorText(text);
+        try { setMirrorVisible(true); } catch {}
+        try {
+          runParseFlow(text, file.name || 'Imported', '');
+          setHint('Imported text added to editor.');
+        } catch (e) {
+          setHint(`Parse error: ${e?.message || 'Unknown error'}`);
+        }
+      }
+    } else {
+      setHint('Import failed. Please try again.');
+    }
+  } catch (e) {
+    if (e?.name !== 'AbortError') {
+      setHint(`Import error: ${e?.message || 'Unknown error'}`);
+    }
+  } finally {
+    importCtl.finish(token);
+    if (importCtl.isCurrent(token)) {
+      importBtn?.removeAttribute('disabled');
+    }
+    if (fileInput) fileInput.value = '';
+  }
+}